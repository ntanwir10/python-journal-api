"""Add user model with refresh token

Revision ID: 17b296e0ba4b
Revises:
Create Date: 2025-07-01 13:30:40.926683

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "17b296e0ba4b"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("idx_journal_entries_user_id"), table_name="journal_entries")
    op.drop_table("journal_entries")
    op.drop_table("users")
    op.drop_index(op.f("ix_journalentry_user_id"), table_name="journalentry")
    op.add_column(
        "user",
        sa.Column("reset_token_expires_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "user", sa.Column("refresh_token", sa.String(length=255), nullable=True)
    )
    op.add_column(
        "user",
        sa.Column(
            "refresh_token_expires_at", sa.DateTime(timezone=True), nullable=True
        ),
    )
    op.create_unique_constraint(None, "user", ["refresh_token"])
    op.drop_column("user", "token_expires_at")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user",
        sa.Column(
            "token_expires_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "user", type_="unique")
    op.drop_column("user", "refresh_token_expires_at")
    op.drop_column("user", "refresh_token")
    op.drop_column("user", "reset_token_expires_at")
    op.create_index(
        op.f("ix_journalentry_user_id"), "journalentry", ["user_id"], unique=False
    )
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "password_hash", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "reset_token", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "token_expires_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint(
            "email",
            name="users_email_key",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "journal_entries",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("work", sa.VARCHAR(length=256), autoincrement=False, nullable=False),
        sa.Column(
            "struggle", sa.VARCHAR(length=256), autoincrement=False, nullable=False
        ),
        sa.Column(
            "intention", sa.VARCHAR(length=256), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("journal_entries_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("journal_entries_pkey")),
    )
    op.create_index(
        op.f("idx_journal_entries_user_id"),
        "journal_entries",
        ["user_id"],
        unique=False,
    )
    # ### end Alembic commands ###
